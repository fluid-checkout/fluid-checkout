{"version":3,"file":"../../wc-brt-fermopoint-shipping-methods/checkout-validation-fermopoint-310-beta-2.min.js","sources":["wc-brt-fermopoint-shipping-methods/checkout-validation-fermopoint-310-beta-2.js"],"sourcesContent":["/**\r\n * Manage checkout front-end validation for: BRT Fermopoint (by BRT)\r\n *\r\n * DEPENDS ON:\r\n * - checkout-validation.js // Main checkout validation script from Fluid Checkout\r\n */\r\n\r\n(function (root, factory) {\r\n\tif ( typeof define === 'function' && define.amd ) {\r\n\t\tdefine([], factory(root));\r\n\t} else if ( typeof exports === 'object' ) {\r\n\t\tmodule.exports = factory(root);\r\n\t} else {\r\n\t\troot.CheckoutValidationFermopoint = factory(root);\r\n\t}\r\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\r\n\r\n\t'use strict';\r\n\r\n\tvar _hasInitialized = false;\r\n\tvar _publicMethods = { };\r\n\tvar _settings = {\r\n\t\ttypeFermopointFieldSelector: '.validate-fermopoint',\r\n\t\tfermopointSectionSelector: '#wc_brt_fermopoint_shipping_methods_custom-tr_container',\r\n\t\tvalidationMessages: {\r\n\t\t\tfermopoint_not_selected: 'Selecting a collection point is required when shipping with FermoPoint.',\r\n\t\t},\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * METHODS\r\n\t */\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if form row is a CNPJ field.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the field is a CNPF field.\r\n\t */\r\n\tvar isFermopointField = function( field, formRow, validationEvent ) {\r\n\t\t// Bail if Fermopoint shipping method not selected\r\n\t\tif ( ! isSelectedBrtFermopointShippingMethod() ) { return false; }\r\n\r\n\t\t// Bail if not a Fermopoint field\r\n\t\tif ( ! field.matches( _settings.typeFermopointFieldSelector ) ) { return false; }\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Validate if a fermopoint collection point is selected.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether a fermopoint collection point has been selected.\r\n\t */\r\n\tvar validateFermpoint = function( field, formRow, validationEvent ) {\r\n\t\t// Bail if fermopoint field is empty\r\n\t\tif ( '' === field.value ) {\r\n\t\t\t// Scroll to fermopoint section\r\n\t\t\tvar fermopointSection = document.querySelector( _settings.fermopointSectionSelector );\r\n\t\t\tif ( fermopointSection && fermopointSection.scrollIntoView ) {\r\n\t\t\t\tfermopointSection.scrollIntoView();\r\n\t\t\t}\r\n\r\n\t\t\t// Return as invalid\r\n\t\t\treturn { valid: false, message: _settings.validationMessages.fermopoint_not_selected };\r\n\t\t}\r\n\r\n\t\t// Field is valid\r\n\t\treturn { valid: true };\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Register validation types.\r\n\t */\r\n\tvar registerValidationTypes = function() {\r\n\t\tCheckoutValidation.registerValidationType( 'fermopoint', 'fermopoint', isFermopointField, validateFermpoint );\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Initialize component and set related handlers.\r\n\t */\r\n\t_publicMethods.init = function( options ) {\r\n\t\tif ( _hasInitialized ) return;\r\n\r\n\t\t// Bail if `CheckoutValidation` is not available\r\n\t\tif ( ! window.CheckoutValidation ) { return; }\r\n\r\n\t\t// Bail if global functions from Fermpoint script are not available\r\n\t\tif ( ! window.isSelectedBrtFermopointShippingMethod ) { return; }\r\n\r\n\t\t// Merge settings\r\n\t\t_settings = FCUtils.extendObject( _settings, options );\r\n\r\n\t\t// Register validation types\r\n\t\tregisterValidationTypes();\r\n\r\n\t\t_hasInitialized = true;\r\n\t};\r\n\r\n\r\n\t\r\n\t//\r\n\t// Public APIs\r\n\t//\r\n\treturn _publicMethods;\r\n\r\n});\r\n"],"names":["root","factory","define","amd","exports","module","CheckoutValidationFermopoint","global","this","window","isFermopointField","field","formRow","validationEvent","isSelectedBrtFermopointShippingMethod","matches","_settings","typeFermopointFieldSelector","validateFermpoint","value","fermopointSection","document","querySelector","fermopointSectionSelector","scrollIntoView","valid","message","validationMessages","fermopoint_not_selected","_hasInitialized","_publicMethods","init","options","CheckoutValidation","FCUtils","extendObject","registerValidationType"],"mappings":"AAOA,CAAA,SAAWA,EAAMC,GACO,YAAlB,OAAOC,QAAyBA,OAAOC,IAC3CD,OAAO,GAAID,EAAY,CAAC,EACM,UAAnB,OAAOG,QAClBC,OAAOD,QAAUH,EAAY,EAE7BD,EAAKM,6BAA+BL,EAAY,CAEjD,EAAoB,aAAlB,OAAOM,OAAyBA,OAASC,KAAKC,QAAUD,KAAKD,OAAQ,SAAUP,GAEjF,aA2BwB,SAApBU,EAA8BC,EAAOC,EAASC,GAEjD,MAAOC,CAAAA,CAAAA,sCAAsC,GAGtCH,CAAAA,CAAAA,EAAMI,QAASC,EAAUC,2BAA4B,CAG7D,CAWwB,SAApBC,EAA8BP,EAAOC,EAASC,GAEjD,MAAK,KAAOF,EAAMQ,QAEbC,EAAoBC,SAASC,cAAeN,EAAUO,yBAA0B,IAC1DH,EAAkBI,gBAC3CJ,EAAkBI,eAAe,EAI3B,CAAEC,MAAO,CAAA,EAAOC,QAASV,EAAUW,mBAAmBC,uBAAwB,GAI/E,CAAEH,MAAO,CAAA,CAAK,CACtB,CA3DA,IAAII,EAAkB,CAAA,EAClBC,EAAiB,GACjBd,EAAY,CACfC,4BAA6B,uBAC7BM,0BAA2B,0DAC3BI,mBAAoB,CACnBC,wBAAyB,yEAC1B,CACD,EA0FA,OAvBAE,EAAeC,KAAO,SAAUC,GAC1BH,GAGEpB,OAAOwB,oBAGPxB,OAAOK,wCAGdE,EAAYkB,QAAQC,aAAcnB,EAAWgB,CAAQ,EAlBrDC,mBAAmBG,uBAAwB,aAAc,aAAc1B,EAAmBQ,CAAkB,EAuB5GW,EAAkB,CAAA,EACnB,EAOOC,CAER,CAAC"}