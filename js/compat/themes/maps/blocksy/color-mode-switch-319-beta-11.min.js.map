{"version":3,"file":"../../blocksy/color-mode-switch-319-beta-11.min.js","sources":["blocksy/color-mode-switch-319-beta-11.js"],"sourcesContent":["/**\r\n * Sync FC color mode with theme's\r\n *\r\n * DEPENDS ON:\r\n * - jQuery // Interact with WooCommerce events\r\n */\r\n(function (root, factory) {\r\n\tif ( typeof define === 'function' && define.amd ) {\r\n\t\tdefine([], factory(root));\r\n\t} else if ( typeof exports === 'object' ) {\r\n\t\tmodule.exports = factory(root);\r\n\t} else {\r\n\t\troot.BlocksyColorModeSwitch = factory(root);\r\n\t}\r\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\r\n\r\n\t'use strict';\r\n\r\n\tvar $ = jQuery;\r\n\tvar _hasJQuery = ( $ != null );\r\n\r\n\tvar _hasInitialized = false;\r\n\tvar _publicMethods = {};\r\n\tvar _settings = {\r\n\t\tswitchColorModeNonce: '', // Value updated during runtime\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * METHODS\r\n\t */\r\n\r\n\r\n\r\n\t/**\r\n\t * Get cookie value by name.\r\n\t * \r\n\t *  @param  {String}  cname  Name of the cookie.\r\n\t */\r\n\tvar getCookie = function( cname ) {\r\n\t\t// Append \"=\" to the cookie name\r\n\t\tlet name = cname + \"=\";\r\n\r\n\t\t// Get all cookies in an array by splitting them by \";\"\r\n\t\tlet cookies = document.cookie.split( ';' );\r\n\r\n\t\t// Loop through the cookies array\r\n\t\tfor ( let i = 0; i < cookies.length; i++ ) {\r\n\t\t\t// Get the current cookie\r\n\t\t\tlet cookie = cookies[i];\r\n\r\n\t\t\t// Remove any leading spaces\r\n\t\t\twhile ( cookie.charAt( 0 ) == ' ' ) {\r\n\t\t\t\tcookie = cookie.substring( 1 );\r\n\t\t\t}\r\n\r\n\t\t\t// If the cookie is found, return the value of the cookie\r\n\t\t\tif ( cookie.indexOf( name ) == 0 ) {\r\n\t\t\t\treturn cookie.substring( name.length, cookie.length );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Maybe swith color mode.\r\n\t */\r\n\tvar maybeSwitchColorMode = function() {\r\n\t\t// Wait until the color mode is updated\r\n\t\tsetTimeout( () => {\r\n\t\t\tlet colorMode = getCookie( 'blocksy_current_theme' );\r\n\r\n\t\t\t// Add body class inidicating dark mode\r\n\t\t\tif ( 'dark' === colorMode && ! $( document.body ).hasClass( 'has-fc-dark-mode' ) ) {\r\n\t\t\t\t$( document.body ).addClass( 'has-fc-dark-mode' );\r\n\t\t\t} else if ( 'light' === colorMode ) {\r\n\t\t\t\t$( document.body ).removeClass( 'has-fc-dark-mode' );\r\n\t\t\t}\r\n\r\n\t\t\t// CSS variables\r\n\t\t\tloadCssVariables( colorMode );\r\n\t\t}, 300 )\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Load CSS variables for the currently active color mode.\r\n\t */\r\n\tvar loadCssVariables = function( colorMode ) {\r\n\t\t// Get data to send\r\n\t\tvar data = FCUtils.extendObject( data, {\r\n\t\t\tcolor_mode: colorMode,\r\n\t\t\tsecurity: _settings.switchColorModeNonce,\r\n\t\t} );\r\n\r\n\t\t// Add CSS variables using AJAX\r\n\t\t$.ajax({\r\n\t\t\turl: fcSettings.wcAjaxUrl.toString().replace( '%%endpoint%%', 'fc_switch_color_mode' ),\r\n\t\t\ttype: 'POST',\r\n\t\t\tdata: data,\r\n\t\t\tdataType: 'json',\r\n\t\t\tsuccess: function( response ) {\r\n\t\t\t\tlet cssVariables = response.variables;\r\n\r\n\t\t\t\t// Add the received variables to root\r\n\t\t\t\tObject.keys( cssVariables ).forEach(function( key ) {\r\n\t\t\t\t\tdocument.documentElement.style.setProperty( key, cssVariables[key] );\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Initialize component and set related handlers.\r\n\t */\r\n\t_publicMethods.init = function( options ) {\r\n\t\tif ( _hasInitialized ) return;\r\n\r\n\t\t// Merge settings\r\n\t\t_settings = FCUtils.extendObject( _settings, options );\r\n\r\n\t\tif ( _hasJQuery ) {\r\n\t\t\t// Maybe change color mode when theme's color switch is clicked\r\n\t\t\t$( document.body ).on( 'click', '.ct-color-switch', maybeSwitchColorMode );\r\n\t\t}\r\n\r\n\t\t_hasInitialized = true;\r\n\t};\r\n\r\n\r\n\r\n\t//\r\n\t// Public APIs\r\n\t//\r\n\treturn _publicMethods;\r\n\r\n});"],"names":["root","factory","define","amd","exports","module","BlocksyColorModeSwitch","global","this","window","maybeSwitchColorMode","setTimeout","let","colorMode","cname","name","cookies","document","cookie","split","i","length","charAt","substring","indexOf","$","body","hasClass","removeClass","addClass","data","FCUtils","extendObject","color_mode","security","_settings","switchColorModeNonce","ajax","url","fcSettings","wcAjaxUrl","toString","replace","type","dataType","success","response","cssVariables","variables","Object","keys","forEach","key","documentElement","style","setProperty","jQuery","_hasJQuery","_hasInitialized","_publicMethods","init","options","on"],"mappings":"AAMA,CAAA,SAAWA,EAAMC,GACO,YAAlB,OAAOC,QAAyBA,OAAOC,IAC3CD,OAAO,GAAID,EAAY,CAAC,EACM,UAAnB,OAAOG,QAClBC,OAAOD,QAAUH,EAAY,EAE7BD,EAAKM,uBAAyBL,EAAY,CAE3C,EAAoB,aAAlB,OAAOM,OAAyBA,OAASC,KAAKC,QAAUD,KAAKD,OAAQ,SAAUP,GAEjF,aAuD2B,SAAvBU,IAEHC,WAAY,KACXC,IAAIC,EAlCU,SAAUC,GAEzBF,IAAIG,EAAOD,EAAQ,IAGfE,EAAUC,SAASC,OAAOC,MAAO,GAAI,EAGzC,IAAMP,IAAIQ,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,CAAC,GAAK,CAE1CR,IAAIM,EAASF,EAAQI,GAGrB,KAA8B,KAAtBF,EAAOI,OAAQ,CAAE,GACxBJ,EAASA,EAAOK,UAAW,CAAE,EAI9B,GAA+B,GAA1BL,EAAOM,QAAST,CAAK,EACzB,OAAOG,EAAOK,UAAWR,EAAKM,OAAQH,EAAOG,MAAO,CAEtD,CAEA,MAAO,EACR,EAU6B,uBAAwB,EAG9C,SAAWR,GAAeY,EAAGR,SAASS,IAAK,EAAEC,SAAU,kBAAmB,EAEnE,UAAYd,GACvBY,EAAGR,SAASS,IAAK,EAAEE,YAAa,kBAAmB,EAFnDH,EAAGR,SAASS,IAAK,EAAEG,SAAU,kBAAmB,EAiB9CC,EAAOC,QAAQC,aAAfF,KAAAA,EAAmC,CACtCG,WAZkBpB,EAalBqB,SAAUC,EAAUC,oBACrB,CAAE,EAGFX,EAAEY,KAAK,CACNC,IAAKC,WAAWC,UAAUC,SAAS,EAAEC,QAAS,eAAgB,sBAAuB,EACrFC,KAAM,OACNb,KAAMA,EACNc,SAAU,OACVC,QAAS,SAAUC,GAClBlC,IAAImC,EAAeD,EAASE,UAG5BC,OAAOC,KAAMH,CAAa,EAAEI,QAAQ,SAAUC,GAC7CnC,SAASoC,gBAAgBC,MAAMC,YAAaH,EAAKL,EAAaK,EAAK,CACpE,CAAC,CACF,CACD,CAAC,CA7BD,EAAG,GAAI,CACR,CApEA,IAAI3B,EAAI+B,OACJC,EAAoB,MAALhC,EAEfiC,EAAkB,CAAA,EAClBC,EAAiB,GACjBxB,EAAY,CACfC,qBAAsB,EACvB,EAoHA,OAnBAuB,EAAeC,KAAO,SAAUC,GAC1BH,IAGLvB,EAAYJ,QAAQC,aAAcG,EAAW0B,CAAQ,EAEhDJ,GAEJhC,EAAGR,SAASS,IAAK,EAAEoC,GAAI,QAAS,mBAAoBpD,CAAqB,EAG1EgD,EAAkB,CAAA,EACnB,EAOOC,CAER,CAAC"}