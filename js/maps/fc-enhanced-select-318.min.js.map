{"version":3,"file":"../fc-enhanced-select-318.min.js","sources":["fc-enhanced-select-318.js"],"sourcesContent":["/**\n * Initialize enhanced select fields with TomSelect, instead of Select2.\n */\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t\tdefine([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t\tmodule.exports = factory(root);\n\t} else {\n\t\troot.FCEnhancedSelect = factory(root);\n\t}\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\tvar $ = jQuery;\n\tvar _hasJQuery = ( $ != null );\n\n\tvar _hasInitialized = false;\n\tvar _publicMethods = {};\n\tvar _settings = {\n\t\tbodyClass:                             'has-fc-enhanced-select',\n\t\tformRowSelector:                       '.form-row.fc-select2-field',\n\t\tselectFieldSelector:                   '.fc-select2-field select',\n\t\twrapperElementSelector:                '.ts-wrapper',\n\t\tinputFieldSelector:                    '.ts-control > input',\n\n\t\tfieldSettings: {\n\t\t\tmaxOptions: 999999,\n\t\t\tcreate: false,\n\t\t\tdiacritics: true,\n\t\t\topenOnFocus: false,\n\t\t},\n\t\tfieldPluginsSingle: [],\n\t\tfieldPluginsMulti: [ 'remove_button' ],\n\t};\n\n\n\n\t/**\n\t * SELECT2 SUPPORT\n\t */\n\n\t/**\n\t * Enhance select fields with TomSelect when trying to use `select2` or `selectWoo` jQuery plugins.\n\t */\n\tvar initializeFromSelect2 = function() {\n\t\tvar $fields = $( this );\n\n\t\t// Iterate fields and enhance them with TomSelect\n\t\t$fields.each( function( i, field ) {\n\t\t\t_publicMethods.enhanceFields( field );\n\t\t} );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Support for Select2 and SelectWoo jQuery plugins.\n\t * Replace `$.fn.select2` and `$.fn.selectWoo` with a dummy function to avoid JS errors when other plugins try to use them.\n\t */\n\tvar replaceSelect2JQueryPlugins = function() {\n\t\t// Bail if jQuery is not available\n\t\tif ( ! _hasJQuery ) { return; }\n\n\t\t// Replace `$.fn.select2` and `$.fn.selectWoo` with a dummy function\n\t\t$.fn.select2 = initializeFromSelect2;\n\t\t$.fn.selectWoo = initializeFromSelect2;\n\t}\n\t// Replace immediatelly.\n\treplaceSelect2JQueryPlugins();\n\n\n\n\t/**\n\t * METHODS\n\t */\n\n\n\t\n\t/**\n\t * Get the selected values of a select field.\n\t * \n\t * @param    {Element}       field   The select field.\n\t * \n\t * @returns  {Array|string}          The selected values as an array, or a single value if only one is selected.\n\t */\n\tvar getSelectValues = function( field ) {\n\t\t// Bail if field is not valid\n\t\tif ( ! field || ! field.options ) { return; }\n\n\t\t// Initialize results array\n\t\tvar results = [];\n\n\t\t// Get options\n\t\tvar options = field.options;\n\t\tvar currentOption;\n\n\t\t// Iterate options and get selected values\n\t\tfor ( var i = 0; i < options.length; i++ ) {\n\t\t\tcurrentOption = options[i];\n\n\t\t\t// Add selected value to results\n\t\t\tif ( currentOption.selected ) {\n\t\t\t\tresults.push( currentOption.value || currentOption.text );\n\t\t\t}\n\t\t}\n\n\t\t// Maybe return single value\n\t\tif ( results.length === 1 ) {\n\t\t\tresults = results[ 0 ];\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Update the selected value of an enhanced select field.\n\t *\n\t */\n\tvar updateSelectedValue = function( field ) {\n\t\t// Bail if field is not valid\n\t\tif ( ! field ) { return; }\n\n\t\t// Get updated field value\n\t\tvar values = getSelectValues( field );\n\n\t\t// Set value, without triggering `change` event\n\t\t// to avoid infinite loop.\n\t\tfield.tomselect.setValue( values, true );\n\t}\n\n\n\n\t/**\n\t * Unset autocomplete attribute for the search field.\n\t */\n\tvar disableFieldAutocomplete = function() {\n\t\t// Get field reference\n\t\tvar tomselect = this;\n\t\tvar searchField = tomselect.focus_node;\n\n\t\t// Unset autocomplete attribute for the search field\n\t\tsearchField.setAttribute( 'autocomplete', 'off-' + Date.now() );\n\t}\n\n\t/**\n\t * Maybe scroll to the top of the field when opening the dropdown.\n\t */\n\tvar maybeScrollToField = function() {\n\t\t// Bail if not on target breakpoint or smaller\n\t\tif ( ! FCUtils.isCurrentBreakpointOrSmaller( 'phablet' ) ) { return; }\n\n\t\t// Get field reference\n\t\tvar tomselect = this;\n\t\tvar searchField = tomselect.focus_node;\n\t\tvar formRow = searchField.closest( _settings.formRowSelector );\n\n\t\t// Bail if form row is not found\n\t\tif ( ! formRow ) { return; }\n\n\t\t// Scroll to the top of the form row\n\t\tFCUtils.scrollToElement( formRow, null, 30 );\n\t}\n\n\n\n\t/**\n\t * Maybe open the dropdown of the field.\n\t * \n\t * @param  {Element}  field  The select field.\n\t */\n\tvar maybeOpenDropdown = function( field ) {\n\t\t// Bail if field is not valid\n\t\tif ( ! field ) { return; }\n\n\t\t// Bail if not a TomSelect field\n\t\tif ( ! field.tomselect ) { return; }\n\n\t\t// Get TomSelect instance\n\t\tvar tomselect = field.tomselect;\n\n\t\t// Maybe open field dropdown\n\t\tif ( ! tomselect.isOpen ) {\n\t\t\ttomselect.open();\n\t\t}\n\t}\n\n\t/**\n\t * Maybe close the dropdown of the field.\n\t * \n\t * @param  {Element}  field  The select field.\n\t */\n\tvar maybeCloseDropdown = function( field ) {\n\t\t// Bail if field is not valid\n\t\tif ( ! field ) { return; }\n\n\t\t// Bail if not a TomSelect field\n\t\tif ( ! field.tomselect ) { return; }\n\n\t\t// Get TomSelect instance\n\t\tvar tomselect = field.tomselect;\n\n\t\t// Maybe close field dropdown\n\t\tif ( tomselect.isOpen ) {\n\t\t\ttomselect.close();\n\t\t}\n\t}\n\n\t/**\n\t * Maybe toggle the dropdown of the field open/closed status.\n\t * \n\t * @param  {Element}  field  The select field.\n\t */\n\tvar maybeToggleDropdown = function( field ) {\n\t\t// Bail if field is not valid\n\t\tif ( ! field ) { return; }\n\n\t\t// Bail if not a TomSelect field\n\t\tif ( ! field.tomselect ) { return; }\n\n\t\t// Get TomSelect instance\n\t\tvar tomselect = field.tomselect;\n\t\tvar isOpen = tomselect.isOpen;\n\n\t\t// Maybe toggle field dropdown\n\t\trequestAnimationFrame( function() {\n\t\tif ( isOpen ) {\n\t\t\t\tmaybeCloseDropdown( field );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmaybeOpenDropdown( field );\n\t\t\t}\n\t\t} );\n\t}\n\n\n\n\t/** \n\t * Enhance selecct fields with TomSelect.\n\t * \n\t * @param  {Element|string}  fieldOrSelector   (optional) Field or CSS selector for the fields to enhance, will use default settings if not defined.\n\t * @param  {object}          settings          (optional) Settings for the enhanced select fields, will use default settings if not defined.\n\t */\n\t_publicMethods.enhanceFields = function( fieldOrSelector, settings ) {\n\t\t// Bail if TomSelect is not defined\n\t\tif ( 'undefined' === typeof TomSelect ) { return; }\n\n\t\t// Get selector from settings if not defined\n\t\tif ( undefined === fieldOrSelector || null === fieldOrSelector ) {\n\t\t\tfieldOrSelector = _settings.selectFieldSelector;\n\t\t}\n\n\t\t// Bail if not an accepted field or selector is not of type string\n\t\t// fieldOrSelector is a `select` Field\n\t\tif ( 'string' !== typeof fieldOrSelector && ( 'object' !== typeof fieldOrSelector || ! fieldOrSelector.matches( 'select' ) ) ) { return; }\n\n\t\t// Maybe get default settings\n\t\tif ( undefined === settings || null === settings ) {\n\t\t\tsettings = _settings.fieldSettings;\n\t\t}\n\n\t\t// Get fields to apply the enhanced select\n\t\tvar fields = [ fieldOrSelector ];\n\n\t\t// Maybe get fields from selector\n\t\tif ( 'string' === typeof fieldOrSelector ) {\n\t\t\ttry {\n\t\t\t\tfields = document.querySelectorAll( fieldOrSelector );\n\t\t\t}\n\t\t\tcatch( error ) {\n\t\t\t\tconsole.warn( 'Enhanced select: ' + error.message );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Iterate fields and enhance them with TomSelect\n\t\tfor ( var i = 0; i < fields.length; i++ ) {\n\t\t\t// Get field reference and value\n\t\t\tvar field = fields[ i ];\n\t\t\tvar values = getSelectValues( field );\n\t\t\tvar isMultiple = field.hasAttribute( 'multiple' );\n\n\t\t\t// Maybe destroy TomSelect instance\n\t\t\tif ( field.tomselect ) {\n\t\t\t\tfield.tomselect.destroy();\n\t\t\t}\n\n\t\t\t// Handle differences between single and multiple select fields\n\t\t\t// Multiple select\n\t\t\tif ( isMultiple ) {\n\t\t\t\tsettings.plugins = _settings.fieldPluginsMulti;\n\t\t\t}\n\t\t\t// Single select\n\t\t\telse {\n\t\t\t\tsettings.plugins = _settings.fieldPluginsSingle;\n\t\t\t}\n\n\t\t\t// Enhance field with TomSelect\n\t\t\tvar instance = new TomSelect( field, settings );\n\n\t\t\t// Set value, without triggering `change` event\n\t\t\t// to avoid infinite loop.\n\t\t\tinstance.setValue( values, true );\n\n\t\t\t// Set event listeners\n\t\t\tinstance.on( 'focus', disableFieldAutocomplete );\n\t\t\tinstance.on( 'blur', disableFieldAutocomplete );\n\t\t\tinstance.on( 'dropdown_open', maybeScrollToField );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Handle captured `focus` event and route to the appropriate functions.\n\t */\n\tvar handleFocus = function( e ) {\n\t\t// SEARCH INPUT FIELD\n\t\tif ( e.target.closest( _settings.inputFieldSelector ) ) {\n\t\t\tvar wrapper = e.target.closest( _settings.wrapperElementSelector );\n\t\t\tvar field = wrapper.parentNode.querySelector( 'select' );\n\t\t\tmaybeOpenDropdown( field );\n\t\t}\n\t}\n\n\t/**\n\t * Handle captured `blur` event and route to the appropriate functions.\n\t */\n\tvar handleBlur = function( e ) {\n\t\t// SEARCH INPUT FIELD\n\t\tif ( e.target.closest( _settings.inputFieldSelector ) ) {\n\t\t\tvar wrapper = e.target.closest( _settings.wrapperElementSelector );\n\t\t\tvar field = wrapper.parentNode.querySelector( 'select' );\n\t\t\tmaybeCloseDropdown( field );\n\t\t}\n\t}\n\n\t/**\n\t * Handle captured `change` event and route to the appropriate functions.\n\t */\n\tvar handleChange = function( e ) {\n\t\t// SELECT FIELD\n\t\tif ( e.target.closest( _settings.wrapperElementSelector ) ) {\n\t\t\tvar wrapper = e.target.closest( _settings.wrapperElementSelector );\n\t\t\tvar field = wrapper.parentNode.querySelector( 'select' );\n\n\t\t\t// Only process if field is a TomSelect instance\n\t\t\tif ( field.tomselect ) {\n\t\t\t\t// Update selected value\n\t\t\t\tupdateSelectedValue( field );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handle captured `click` event and route to the appropriate functions.\n\t */\n\tvar handleClick = function( e ) {\n\t\t// SELECT FIELD\n\t\tif ( e.target.closest( _settings.wrapperElementSelector ) ) {\n\t\t\tvar wrapper = e.target.closest( _settings.wrapperElementSelector );\n\t\t\tvar field = wrapper.parentNode.querySelector( 'select' );\n\t\t\tmaybeToggleDropdown( field );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Initialize component and set related handlers.\n\t */\n\t_publicMethods.init = function( options ) {\n\t\tif ( _hasInitialized ) return;\n\n\t\t// Merge settings with defaults\n\t\t_settings = FCUtils.extendObject( _settings, options );\n\n\t\t// Set event listener for enhanced select fields\n\t\tdocument.addEventListener( 'click', handleClick, true );\n\t\tdocument.addEventListener( 'change', handleChange, true );\n\t\tdocument.addEventListener( 'focus', handleFocus, true );\n\t\tdocument.addEventListener( 'blur', handleBlur, true );\n\n\t\t// Initialize fields\n\t\t_publicMethods.enhanceFields();\n\n\t\t// Add init class\n\t\tdocument.body.classList.add( _settings.bodyClass );\n\n\t\t_hasInitialized = true;\n\t}\n\n\n\n\t/**\n\t * Expose public APIs.\n\t */\n\treturn _publicMethods;\n\n});\n"],"names":["root","factory","define","amd","exports","module","FCEnhancedSelect","global","this","window","initializeFromSelect2","$","each","i","field","_publicMethods","enhanceFields","disableFieldAutocomplete","focus_node","setAttribute","Date","now","maybeScrollToField","formRow","FCUtils","isCurrentBreakpointOrSmaller","closest","_settings","formRowSelector","scrollToElement","handleFocus","e","target","inputFieldSelector","wrapperElementSelector","parentNode","querySelector","maybeOpenDropdown","handleBlur","maybeCloseDropdown","handleChange","values","tomselect","getSelectValues","setValue","handleClick","isOpen","requestAnimationFrame","jQuery","_hasInitialized","bodyClass","selectFieldSelector","fieldSettings","maxOptions","create","diacritics","openOnFocus","fieldPluginsSingle","fieldPluginsMulti","fn","select2","selectWoo","options","currentOption","results","length","selected","push","value","text","open","close","fieldOrSelector","settings","TomSelect","undefined","matches","fields","document","querySelectorAll","error","console","warn","message","isMultiple","hasAttribute","instance","destroy","plugins","on","init","extendObject","addEventListener","body","classList","add"],"mappings":"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"}