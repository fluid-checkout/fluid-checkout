{"version":3,"file":"../checkout-validation-3112-beta-2.min.js","sources":["checkout-validation-3112-beta-2.js"],"sourcesContent":["/**\r\n * Manage checkout front-end validation.\r\n *\r\n * DEPENDS ON:\r\n * - jQuery // Interact with WooCommerce events\r\n */\r\n\r\n(function (root, factory) {\r\n\tif ( typeof define === 'function' && define.amd ) {\r\n\t\tdefine([], factory(root));\r\n\t} else if ( typeof exports === 'object' ) {\r\n\t\tmodule.exports = factory(root);\r\n\t} else {\r\n\t\troot.CheckoutValidation = factory(root);\r\n\t}\r\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\r\n\r\n\t'use strict';\r\n\r\n\tvar $ = jQuery;\r\n\tvar _hasJQuery = ( $ != null );\r\n\r\n\tvar _hasInitialized = false;\r\n\tvar _publicMethods = {};\r\n\tvar _validationTypes = {};\r\n\tvar _settings = {\r\n\t\tbodyClass:                               'fc-checkout-validation--active',\r\n\t\tformSelector:                            'form.checkout',\r\n\t\tformRowSelector:                         '.form-row, .shipping-method__package',\r\n\t\tinputWrapperSelector:                    '.woocommerce-input-wrapper, .form-row',\r\n\t\tvalidateFieldsSelector:                  '.input-text, select, .input-checkbox, .shipping-method__options',\r\n\t\treferenceNodeSelector:                   '.input-text, select, .input-checkbox, .shipping-method__options', // Usually same as `validateFieldsSelector`\r\n\t\tclearValidationCountryChangedSelector:   '#state, #shipping_state, #billing_state',\r\n\t\talwaysValidateFieldsSelector:            '',\r\n\r\n\t\tselect2Selector:                         '.select2, .select2-hidden-accessible',\r\n\t\tselect2WrapperSelector:                  '.select2-container',\r\n\t\tselectTomSelector:                       '.ts-hidden-accessible',\r\n\t\tselectTomWrapperSelector:                '.ts-wrapper',\r\n\r\n\t\ttypeRequiredSelector:                    '.validate-required',\r\n\t\ttypeEmailSelector:                       '.validate-email',\r\n\t\ttypeConfirmationSelector:                '[data-confirm-with]',\r\n\t\ttypeShippingMethodSelector:              '.shipping-method__package',\r\n\r\n\t\tvalidClass:                              'woocommerce-validated',\r\n\t\tinvalidClass:                            'woocommerce-invalid',\r\n\r\n\t\tvalidationMessages: {\r\n\t\t\trequired:                            'This is a required field.',\r\n\t\t\temail:                               'This is not a valid email address.',\r\n\t\t\tconfirmation:                        'This field does not match the related field value.',\r\n\t\t},\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * METHODS\r\n\t */\r\n\t\r\n\r\n\r\n\t/**\r\n\t * Check if field is hidden to the user.\r\n\t * @param  {Field}  field  Field to test visibility.\r\n\t * @return {Boolean}       True if field is hidden to the user.\r\n\t */\r\n\tvar isFieldHidden = function( field ) {\r\n\t\treturn ( field.offsetParent === null );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if field is in allow list for always validate.\r\n\t * @param  {Field}  field  Field to test for allow list.\r\n\t * @return {Boolean}       True if field is in allow list for always validate.\r\n\t */\r\n\tvar isAlwaysValidate = function( field ) {\r\n\t\t// Bail if field not found or selector empty\r\n\t\tif ( ! field || ! _settings.alwaysValidateFieldsSelector ) { return false; }\r\n\r\n\t\t// Check if field is in allow list\r\n\t\tif ( field.matches( _settings.alwaysValidateFieldsSelector ) ) { return true; }\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Get the form-row element related to the field.\r\n\t * @param  {Field}  field  Form field.\r\n\t * @return {Element}       Form row related to the passed field.\r\n\t */\r\n\tvar getFormRow = function( field ) {\r\n\t\t// Bail if field not valid\r\n\t\tif ( !field ) { return; }\r\n\r\n\t\treturn field.closest( _settings.formRowSelector );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Add markup for inline message of required fields.\r\n\t * @param  {Field}   field         Field to validate.\r\n\t * @param  {Element} formRow       Form row related to the field.\r\n\t * @param  {String}  message       Message to add.\r\n\t * @param  {String}  invalidClass  Type of error used to identify which message is related to which error.\r\n\t */\r\n\tvar addInlineMessage = function( field, formRow, message, invalidClass ) {\r\n\t\t// Bail if field not valid\r\n\t\tif ( ! field ) { return; }\r\n\r\n\t\t// Bail if message is empty\r\n\t\tif ( ! message || message.length == 0 ) { return; }\r\n\r\n\t\tvar inputWrapper = field.closest( _settings.inputWrapperSelector ) || formRow;\r\n\t\tvar referenceNode = inputWrapper.querySelector( _settings.referenceNodeSelector );\r\n\r\n\t\t// Change reference field for select2\r\n\t\tif ( isSelect2Field( field ) ) {\r\n\t\t\tvar newReference = field.parentNode.querySelector( _settings.select2WrapperSelector );\r\n\t\t\tif ( newReference ) { referenceNode = newReference; }\r\n\t\t}\r\n\r\n\t\t// Change reference field for TomSelect control element \r\n\t\tif ( isSelectTomField( field ) ) {\r\n\t\t\tvar newReference = field.parentNode.querySelector( _settings.selectTomWrapperSelector );\r\n\t\t\tif ( newReference ) { referenceNode = newReference; }\r\n\t\t}\r\n\r\n\t\t// Change reference field for checkbox\r\n\t\tif ( isCheckboxField( field ) ) {\r\n\t\t\tvar newReference = field.closest( _settings.inputWrapperSelector );\r\n\t\t\tif ( newReference ) { referenceNode = newReference.lastChild; }\r\n\t\t}\r\n\r\n\t\t// Create message element and add it after the field.\r\n\t\tvar parent = referenceNode.parentNode;\r\n\t\tvar element = document.createElement( 'span' );\r\n\t\telement.className = 'woocommerce-error invalid-' + invalidClass;\r\n\t\telement.innerText = message;\r\n\t\tparent.insertBefore( element, referenceNode.nextSibling );\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Remove inline message from the field.\r\n\t * @param  {Field}    field         Field to validate.\r\n\t * @param  {Element}  formRow       Form row related to the field.\r\n\t * @param  {String}   invalidClass  Type of error used to identify which message is related to which error.\r\n\t */\r\n\tvar removeInlineMessage = function( field, formRow, invalidClass ) {\r\n\t\tvar messageElements = formRow.querySelectorAll( 'span.woocommerce-error.invalid-' + invalidClass );\r\n\t\tfor ( var i = 0; i < messageElements.length; i++ ) {\r\n\t\t\tmessageElements[ i ].parentNode.removeChild( messageElements[ i ] );\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Check field is a select2 element.\r\n\t * @param  {Field}  field     Field to check.\r\n\t * @return {Boolean}          True if field is select2.\r\n\t */\r\n\tvar isSelect2Field = function( field ) {\r\n\t\tif ( field.closest( _settings.select2Selector ) ) { return true; }\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Check field is a TomSelect element.\r\n\t * @param  {Field}  field     Field to check.\r\n\t * @return {Boolean}          True if field is select2.\r\n\t */\r\n\tvar isSelectTomField = function( field ) {\r\n\t\tif ( field.closest( _settings.selectTomSelector ) ) { return true; }\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Check if field is a select field.\r\n\t * @param  {Element}  field  Field to check.\r\n\t * @return {Boolean}         True if is a select field.\r\n\t */\r\n\tvar isSelectField = function( field ) {\r\n\t\tif ( field.matches( 'select' ) ) { return true; }\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Check if field is a checkbox field.\r\n\t * @param  {Element}  field  Field to check.\r\n\t * @return {Boolean}         True if is a checkbox field.\r\n\t */\r\n\tvar isCheckboxField = function( field ) {\r\n\t\tif ( field.matches( 'input[type=\"checkbox\"]' ) ) { return true; }\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if field has value.\r\n\t * @param  {Field}   field  Field to check.\r\n\t * @return {Boolean}        True if field has value.\r\n\t */\r\n\t_publicMethods.hasValue = function( field ) {\r\n\t\t// Check for select fields\r\n\t\tif ( isSelectField( field ) ) {\r\n\t\t\tif ( field.options && field.selectedIndex > -1 && field.options[ field.selectedIndex ].value != '' ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check for checkbox fields\r\n\t\tif ( isCheckboxField( field ) ) {\r\n\t\t\treturn field.checked;\r\n\t\t}\r\n\r\n\t\t// Check for all other fields\r\n\t\tif ( field.value != '' ) { return true; }\r\n\t\t\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if form row is required.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the field is required or not.\r\n\t */\r\n\tvar isRequiredField = function( field, formRow, validationEvent ) {\r\n\t\tif ( ! formRow.matches( _settings.typeRequiredSelector ) ) { return false; }\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Validate required field.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the required field has a value or not.\r\n\t */\r\n\tvar validateRequired = function( field, formRow, validationEvent ) {\r\n\t\t// Bail if field does not have a value\r\n\t\tif ( ! _publicMethods.hasValue( field ) ) { return { valid: false, message: _settings.validationMessages.required }; }\r\n\r\n\t\treturn { valid: true };\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if form row is email field.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the field is an email address field.\r\n\t */\r\n\tvar isEmailField = function( field, formRow, validationEvent ) {\r\n\t\tif ( ! formRow.matches( _settings.typeEmailSelector ) ) { return false; }\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Validate email field.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the field has a valid email address value.\r\n\t */\r\n\tvar validateEmail = function( field, formRow, validationEvent ) {\r\n\t\t// Bail if does not have value\r\n\t\tif ( ! _publicMethods.hasValue( field ) ) { return { valid: true }; }\r\n\r\n\t\t/* https://stackoverflow.com/questions/2855865/jquery-validate-e-mail-address-regex */\r\n\t\tvar emailPattern = new RegExp(/^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i);\r\n\r\n\t\t// Validate email value\r\n\t\tif ( ! emailPattern.test( field.value ) ) { return { valid: false, message: _settings.validationMessages.email }; }\r\n\r\n\t\treturn { valid: true };\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if form row is a confirmation field.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the field is a confirmation field that is related to another field in the form.\r\n\t */\r\n\tvar isConfirmationField = function( field, formRow, validationEvent ) {\r\n\t\tif ( ! formRow.querySelector( _settings.typeConfirmationSelector ) ) { return false; }\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Validate confirmation field.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the confirmation field has the same value as the field it is related to.\r\n\t */\r\n\tvar validateConfirmation = function( field, formRow, validationEvent ) {\r\n\t\t// Bail if does not have value\r\n\t\tif ( ! _publicMethods.hasValue( field ) ) { return { valid: false }; }\r\n\r\n\t\t// Get confirmation field\r\n\t\tvar form = formRow.closest( 'form' );\r\n\t\tvar confirmWith = form ? form.querySelector( field.getAttribute( 'data-confirm-with' ) ) : null;\r\n\r\n\t\t// Validate fields have same value\r\n\t\tif ( confirmWith && field.value == confirmWith.value ) { return { valid: false, message: _settings.validationMessages.confirmation }; }\r\n\r\n\t\treturn { valid: true };\r\n\t};\r\n\r\n\t/**\r\n\t * Check if the form row is a shipping method field wrapper.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the form row is a shipping method field wrapper.\r\n\t */\r\n\t var isShippingMethodField = function( field, formRow, validationEvent ) {\r\n\t\tif ( ! formRow.matches( _settings.typeShippingMethodSelector ) ) { return false; }\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Validate shipping method field.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether a shipping method has been selected in the form row.\r\n\t */\r\n\tvar validateShippingMethod = function( field, formRow, validationEvent ) {\r\n\t\tvar selectedShippingMethod = formRow.querySelector( 'input[type=\"radio\"]:checked' );\r\n\r\n\t\t// Bail if field does not have a value\r\n\t\tif ( ! selectedShippingMethod ) { return { valid: false, message: _settings.validationMessages.required }; }\r\n\r\n\t\treturn { valid: true };\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if field needs validation.\r\n\t * @param  {Field}   field            Field to validate.\r\n\t * @param  {Element} formRow          Form row for validation.\r\n\t * @param  {String}  validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                  True if field needs any validation.\r\n\t */\r\n\tvar needsValidation = function( field, formRow, validationEvent ) {\r\n\t\t// Bail if field should always validate\r\n\t\tif ( isAlwaysValidate( field ) ) { return true; }\r\n\r\n\t\t// Test if field needs validation from any validation type\r\n\t\tvar validationTypeNames = Object.getOwnPropertyNames( _validationTypes );\r\n\t\tfor ( var i = 0; i < validationTypeNames.length; i++) {\r\n\t\t\tvar validationTypeName = validationTypeNames[i];\r\n\t\t\tvar validationType = _validationTypes[ validationTypeName ];\r\n\t\t\tif ( validationType.needsValidation( field, formRow, validationEvent ) ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Process validation results of a field.\r\n\t * @param  {Field}    field              Field to validation.\r\n\t * @param  {Element}  formRow            Form row element.\r\n\t * @param  {Array}    validationResults  Validation results array.\r\n\t * @return {Boolean}                     True if all fields are valid.\r\n\t */\r\n\tvar processValidationResults = function( field, formRow, validationResults ) {\r\n\t\tvar valid = true;\r\n\r\n\t\t// Iterate validation results\r\n\t\tvar validationResultsNames = Object.getOwnPropertyNames( validationResults );\r\n\t\tfor ( var i = 0; i < validationResultsNames.length; i++ ) {\r\n\t\t\tvar validationTypeName = validationResultsNames[ i ];\r\n\t\t\tvar validationType = _validationTypes[ validationTypeName ];\r\n\t\t\tvar result = validationResults[ validationTypeName ].valid;\r\n\t\t\tvar message = validationResults[ validationTypeName ].message;\r\n\t\t\tvar invalidClass = validationType.invalidClass;\r\n\r\n\t\t\t// Remove class and message for the current validation type\r\n\t\t\tformRow.classList.remove( _settings.invalidClass +'-'+ validationType.invalidClass );\r\n\t\t\tremoveInlineMessage( field, formRow, invalidClass );\r\n\r\n\t\t\t// Maybe set field as invalid\r\n\t\t\tif ( true !== result ) {\r\n\t\t\t\tvalid = false;\r\n\r\n\t\t\t\t// Maybe display inline message and set field as invalid\r\n\t\t\t\tif ( null !== result ) {\r\n\t\t\t\t\taddInlineMessage( field, formRow, message, invalidClass );\r\n\r\n\t\t\t\t\t// Add field validation invalid classes for the validation type\r\n\t\t\t\t\tformRow.classList.add( _settings.invalidClass +'-'+ validationType.invalidClass );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Toggle general field valid/invalid classes\r\n\t\tformRow.classList.toggle( _settings.validClass, valid );\r\n\t\tformRow.classList.toggle( _settings.invalidClass, ! valid );\r\n\r\n\t\treturn valid;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Clear the state fields validation status classes when the field loses the value due changes to the country fields.\r\n\t *\r\n\t * @param   jQuery.Event  event    Event object as a `jQuery.Event`.\r\n\t * @param   string        country  Selected country code value of the related country field.\r\n\t * @param   jQuery.fn     wrapper  jQuery object representing the field wrapper element related to the country field that was changed. See variable `wrapper_selectors` ~LN103 of the `country-select.js`.\r\n\t */\r\n\tvar maybeClearStateFields = function( event, country, wrapper ) {\r\n\t\t// Bail if jQuery is not available\r\n\t\tif ( ! _hasJQuery ) { return; }\r\n\r\n\t\tvar wrappersList = $( wrapper ).toArray();\r\n\r\n\t\twrappersList.forEach( function( wrapperItem ) {\r\n\t\t\t\r\n\t\t\tvar fields = Array.from( wrapperItem.querySelectorAll( _settings.clearValidationCountryChangedSelector ) );\r\n\t\t\t\r\n\t\t\tfields.forEach( function( field ) {\r\n\t\t\t\t\r\n\t\t\t\tif ( '' == field.value ) {\r\n\t\t\t\t\tvar formRow = field.closest( _settings.formRowSelector );\r\n\t\t\t\t\t_publicMethods.clearValidationResults( field, formRow );\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Handle document clicks and route to the appropriate function.\r\n\t */\r\n\tvar handleValidateEvent = function( e ) {\r\n\t\t// Bail if processing checkout update\r\n\t\tif ( true === window.processing_checkout_update ) { return; }\r\n\r\n\t\tvar field = e.target;\r\n\r\n\t\t// Get correct field when is select2\r\n\t\tif ( isSelect2Field( e.target ) ) {\r\n\t\t\tvar formRow = e.target.closest( _settings.formRowSelector );\r\n\r\n\t\t\tif ( formRow ) {\r\n\t\t\t\tfield = formRow.querySelector( 'select' );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_publicMethods.validateField( field, e.type );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Register validation types.\r\n\t */\r\n\tvar registerValidationTypes = function() {\r\n\t\t_publicMethods.registerValidationType( 'required', 'required-field', isRequiredField, validateRequired );\r\n\t\t_publicMethods.registerValidationType( 'email', 'email', isEmailField, validateEmail );\r\n\t\t_publicMethods.registerValidationType( 'confirmation', 'confirmation-field', isConfirmationField, validateConfirmation );\r\n\t\t_publicMethods.registerValidationType( 'shipping-method', 'shipping-method-field', isShippingMethodField, validateShippingMethod );\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Clear validation results status of a field.\r\n\t * @param  {Field} field             Field to validation.\r\n\t * @param  {Element} formRow          Form row element.\r\n\t */\r\n\t _publicMethods.clearValidationResults = function( field, formRow ) {\r\n\t\t// Bail if field or form row invalid\r\n\t\tif ( ! field || ! formRow ) { return; }\r\n\r\n\t\t// Remove invalid classes for validation types\r\n\t\tvar validationTypeKeys = Object.keys( _validationTypes );\r\n\t\tfor ( var i = 0; i < validationTypeKeys.length; i++ ) {\r\n\t\t\tvar type = validationTypeKeys[i];\r\n\t\t\tformRow.classList.remove( _settings.invalidClass +'-'+ type );\r\n\t\t\tformRow.classList.remove( _settings.invalidClass +'-'+ type + '-field' );\r\n\t\t}\r\n\r\n\t\t// Remove valid/invalid classes\r\n\t\tformRow.classList.remove( _settings.validClass );\r\n\t\tformRow.classList.remove( _settings.invalidClass );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Test multiple validations on the passed field.\r\n\t * @param  {Field} field    Field for validation.\r\n\t * @return {String}         Event that triggered the field validation. Can also be an arbitrary event name.\r\n\t * @return {Boolean}        True if field is valid.\r\n\t */\r\n\t_publicMethods.validateField = function( field, validationEvent, validateHidden ) {\r\n\t\t// Bail if field is null\r\n\t\tif ( ! field ) { return true; }\r\n\r\n\t\tvar validationResults = {},\r\n\t\t\tformRow = getFormRow( field );\r\n\r\n\t\t// Bail if formRow not found\r\n\t\tif ( ! formRow ) { return true; }\r\n\r\n\t\t// Bail if hidden to the user\r\n\t\tif ( ! isAlwaysValidate( field ) && validateHidden !== true && isFieldHidden( field ) ) { return true; }\r\n\r\n\t\t// Bail if field doesn't need validation\r\n\t\tif ( ! needsValidation( field, formRow, validationEvent ) ) { return true; }\r\n\r\n\t\t// Execute validate field for all applicable validation types\r\n\t\tvar validationTypeNames = Object.getOwnPropertyNames( _validationTypes );\r\n\t\tfor ( var i = 0; i < validationTypeNames.length; i++) {\r\n\t\t\tvar validationTypeName = validationTypeNames[i];\r\n\t\t\tvar validationType = _validationTypes[ validationTypeName ];\r\n\t\t\tif ( validationType.needsValidation( field, formRow, validationEvent ) ) {\r\n\t\t\t\tvalidationResults[ validationTypeName ] = validationType.validate( field, formRow, validationEvent );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO: Maybe trigger validation of related fields (ie zip > State, Country)\r\n\r\n\t\t// Process results\r\n\t\treturn processValidationResults( field, formRow, validationResults );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Trigger validation in all fields inside the container.\r\n\t * @param  {Element} container Element to look for fields in, if not passed consider the checkout form as container.\r\n\t * @return {Boolean}           True if all fields are valid.\r\n\t */\r\n\t_publicMethods.validateAllFields = function( container, validateHidden ) {\r\n\t\tif ( ! container ) { container = document.querySelector( _settings.formSelector ) }\r\n\r\n\t\tvar all_valid = true;\r\n\t\tvar fields = container.querySelectorAll( _settings.validateFieldsSelector );\r\n\r\n\t\tfor ( var i = 0; i < fields.length; i++ ) {\r\n\t\t\tif ( ! _publicMethods.validateField( fields[i], 'validate-all', validateHidden ) ) {\r\n\t\t\t\tall_valid = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn all_valid;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Register a new validation type.\r\n\t *\r\n\t * @param   String    validationType      A `snake_case` string representing the type of validation. Used as the validation type property on the `_validationTypes` object.\r\n\t * @param   String    invalidClass        CSS class to be used on the `form-row` related to the field when the validation fails.\r\n\t * @param   Function  fnNeedsValidation   A function to check if the field needs validation, should return `true` when the field needs validation.\r\n\t * @param   Function  fnValidate          A function to validate the form field, should accept 2 parameters being `field` and `formRow`, both expected to be an HTMLElement.\r\n\t *\r\n\t * @return  Boolean                  `true` when the registration of the validation type has been successful, `false` otherwise.\r\n\t */\r\n\t_publicMethods.registerValidationType = function( validationType, invalidClass, fnNeedsValidation, fnValidate ) {\r\n\t\t// Bail if _validationTypes not initialized\r\n\t\tif ( ! _validationTypes ) { return false; }\r\n\r\n\t\t// Bail if validationType or invalidClass not a string\r\n\t\tif ( typeof validationType !== 'string' || typeof invalidClass !== 'string' ) { return false; }\r\n\r\n\t\t// Bail if fnNeedsValidation or fnValidate are not functions\r\n\t\tif ( ! ( fnNeedsValidation instanceof Function ) || ! ( fnValidate instanceof Function ) ) { return false; }\r\n\r\n\t\t// Bail if validation type already registered\r\n\t\tif ( _validationTypes.hasOwnProperty( validationType ) ) {\r\n\t\t\tconsole.log( 'Validation type \"' + validationType + '\" already registered.' );\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Register validation type\r\n\t\t_validationTypes[ validationType ] = {\r\n\t\t\tinvalidClass: invalidClass,\r\n\t\t\tneedsValidation: fnNeedsValidation,\r\n\t\t\tvalidate: fnValidate,\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Return the registered validation types.\r\n\t *\r\n\t * @return  Object  Object with the registered validation types as properties.\r\n\t */\r\n\t_publicMethods.getValidationTypes = function() {\r\n\t\treturn _validationTypes;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Initialize component and set related handlers.\r\n\t */\r\n\t_publicMethods.init = function( options ) {\r\n\t\tif ( _hasInitialized ) return;\r\n\r\n\t\t// Merge settings\r\n\t\t_settings = FCUtils.extendObject( _settings, options );\r\n\r\n\t\t// Register validation types\r\n\t\tregisterValidationTypes();\r\n\r\n\t\tif ( _hasJQuery ) {\r\n\t\t\t$( _settings.formSelector ).on( 'input validate change', _settings.validateFieldsSelector, handleValidateEvent );\r\n\r\n\t\t\t// Run on checkout or cart changes\r\n\t\t\t$( document ).on( 'load_ajax_content_done', _publicMethods.init );\r\n\t\t\t$( document ).on( 'country_to_state_changed', maybeClearStateFields );\r\n\t\t}\r\n\r\n\t\t// Add body class\r\n\t\tdocument.body.classList.add( _settings.bodyClass );\r\n\r\n\t\t_hasInitialized = true;\r\n\t};\r\n\r\n\r\n\t\r\n\t//\r\n\t// Public APIs\r\n\t//\r\n\treturn _publicMethods;\r\n\r\n});\r\n"],"names":["root","factory","define","amd","exports","module","CheckoutValidation","global","this","window","isAlwaysValidate","field","_settings","alwaysValidateFieldsSelector","matches","isRequiredField","formRow","validationEvent","typeRequiredSelector","validateRequired","_publicMethods","hasValue","valid","message","validationMessages","required","isEmailField","typeEmailSelector","validateEmail","RegExp","test","value","email","isConfirmationField","querySelector","typeConfirmationSelector","validateConfirmation","confirmWith","form","closest","getAttribute","confirmation","isShippingMethodField","typeShippingMethodSelector","validateShippingMethod","processValidationResults","validationResults","validationResultsNames","Object","getOwnPropertyNames","i","length","validationTypeName","validationType","_validationTypes","result","invalidClass","classList","remove","messageElements","querySelectorAll","parentNode","removeChild","element","referenceNode","inputWrapperSelector","referenceNodeSelector","isSelect2Field","newReference","select2WrapperSelector","isSelectTomField","selectTomWrapperSelector","parent","isCheckboxField","lastChild","document","createElement","className","innerText","insertBefore","nextSibling","add","toggle","validClass","maybeClearStateFields","event","country","wrapper","_hasJQuery","$","toArray","forEach","wrapperItem","Array","from","clearValidationCountryChangedSelector","formRowSelector","clearValidationResults","handleValidateEvent","e","processing_checkout_update","target","validateField","type","jQuery","_hasInitialized","bodyClass","formSelector","validateFieldsSelector","select2Selector","selectTomSelector","options","selectedIndex","checked","validationTypeKeys","keys","validateHidden","offsetParent","validationTypeNames","needsValidation","validate","validateAllFields","container","all_valid","fields","registerValidationType","fnNeedsValidation","fnValidate","Function","hasOwnProperty","console","log","getValidationTypes","init","FCUtils","extendObject","on","body"],"mappings":"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"}