{"version":3,"file":"../fc-enhanced-select-315-beta-6.min.js","sources":["fc-enhanced-select-315-beta-6.js"],"sourcesContent":["/**\n * Initialize enhanced select fields with TomSelect, instead of Select2.\n */\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t\tdefine([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t\tmodule.exports = factory(root);\n\t} else {\n\t\troot.FCEnhancedSelect = factory(root);\n\t}\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\tvar _hasInitialized = false;\n\tvar _publicMethods = {};\n\tvar _settings = {\n\t\tbodyClass:                             'has-fc-enhanced-select',\n\n\t\tenhancedSelectFieldsSelector:          '.fc-select2-field select',\n\t\tenhancedSelectSettings: {\n\t\t\tcreate: false,\n\t\t\tdiacritics: true,\n\t\t},\n\t};\n\n\n\n\n\n\t/**\n\t * METHODS\n\t */\n\n\n\t\n\t/**\n\t * Get the selected values of a select field.\n\t * \n\t * @param    {Element}       field   The select field.\n\t * \n\t * @returns  {Array|string}          The selected values as an array, or a single value if only one is selected.\n\t */\n\tvar getSelectValues = function( field ) {\n\t\tvar results = [];\n\t\tvar options = field && field.options;\n\t\tvar currentOption;\n\n\t\t// Iterate options and get selected values\n\t\tfor ( var i = 0; i < options.length; i++ ) {\n\t\t\tcurrentOption = options[i];\n\t\t\n\t\t\tif ( currentOption.selected ) {\n\t\t\t\tresults.push( currentOption.value || currentOption.text );\n\t\t\t}\n\t\t}\n\n\t\t// Maybe return single value\n\t\tif ( results.length === 1 ) {\n\t\t\tresults = results[0];\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Update the selected value of an enhanced select field.\n\t * \n\t * @param  {Event}  event  The `change` event.\n\t */\n\tvar updateSelectedValue = function( event ) {\n\t\t// Get field reference and value\n\t\tvar field = event.target;\n\n\t\t// Bail if field does not match enhanced select selector\n\t\tif ( ! field.matches( _settings.enhancedSelectFieldsSelector ) ) { return; }\n\n\t\t// Bail if field is not a TomSelect field\n\t\tif ( ! field.tomselect ) { return; }\n\n\t\t// Get updated field value\n\t\tvar values = getSelectValues( field );\n\n\t\t// Set value, without triggering `change` event\n\t\t// to avoid infinite loop.\n\t\tfield.tomselect.setValue( values, true );\n\t}\n\n\n\n\t/**\n\t * Unset autocomplete attribute for the search field.\n\t */\n\tvar unsetAutocompleteAttribute = function() {\n\t\t// Get field reference\n\t\tvar tomselect = this;\n\t\tvar searchField = tomselect.focus_node;\n\n\t\t// Unset autocomplete attribute for the search field\n\t\tsearchField.removeAttribute( 'autocomplete' );\n\t}\n\n\n\n\t/** \n\t * Enhance selecct fields with TomSelect.\n\t * \n\t * @param  {string}  selector   (optional) Selector for the fields to enhance, will use default settings if not defined.\n\t * @param  {object}  settings   (optional) Settings for the enhanced select fields, will use default settings if not defined.\n\t */\n\t_publicMethods.enhanceFields = function( selector, settings ) {\n\t\t// Bail if TomSelect is not defined\n\t\tif ( 'undefined' === typeof TomSelect ) { return; }\n\n\t\t// Get selector from settings if not defined\n\t\tif ( undefined === selector || null === selector ) {\n\t\t\tselector = _settings.enhancedSelectFieldsSelector;\n\t\t}\n\n\t\t// Bail if selector is not of type string\n\t\tif ( 'string' !== typeof selector ) { return; }\n\n\t\t// Maybe get default settings\n\t\tif ( undefined === settings || null === settings ) {\n\t\t\tsettings = _settings.enhancedSelectSettings;\n\t\t}\n\n\t\t// Get fields to apply the enhanced select\n\t\tvar fields;\n\t\ttry {\n\t\t\tfields = document.querySelectorAll( selector );\n\t\t}\n\t\tcatch( error ) {\n\t\t\tconsole.warn( 'Enhanced select: ' + error.message );\n\t\t\treturn;\n\t\t}\n\n\t\t// Iterate fields and enhance them with TomSelect\n\t\tfor ( var i = 0; i < fields.length; i++ ) {\n\t\t\t// Get field reference and value\n\t\t\tvar field = fields[ i ];\n\t\t\tvar values = getSelectValues( field );\n\n\t\t\t// Maybe destroy TomSelect instance\n\t\t\tif ( field.tomselect ) {\n\t\t\t\tfield.tomselect.destroy();\n\t\t\t}\n\n\t\t\t// Enhance field with TomSelect\n\t\t\tnew TomSelect( field, settings );\n\n\t\t\t// Set value, without triggering `change` event\n\t\t\t// to avoid infinite loop.\n\t\t\tfield.tomselect.setValue( values, true );\n\n\t\t\t// Unset autocomplete attribute for the search field\n\t\t\t// on initialization, focus and blur events.\n\t\t\tfield.tomselect.on( 'initialize', unsetAutocompleteAttribute );\n\t\t\tfield.tomselect.on( 'focus', unsetAutocompleteAttribute );\n\t\t\tfield.tomselect.on( 'blur', unsetAutocompleteAttribute );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Initialize component and set related handlers.\n\t */\n\t_publicMethods.init = function( options ) {\n\t\tif ( _hasInitialized ) return;\n\n\t\t// Merge settings with defaults\n\t\t_settings = FCUtils.extendObject( _settings, options );\n\n\t\t// Set event listener for enhanced select fields\n\t\tdocument.addEventListener( 'change', updateSelectedValue, true );\n\n\t\t// Initialize fields\n\t\t_publicMethods.enhanceFields();\n\n\t\t// Add init class\n\t\tdocument.body.classList.add( _settings.bodyClass );\n\n\t\t_hasInitialized = true;\n\t}\n\n\n\n\n\n\t/**\n\t * Expose public APIs.\n\t */\n\treturn _publicMethods;\n\n});\n"],"names":["root","factory","define","amd","exports","module","FCEnhancedSelect","global","this","window","getSelectValues","field","currentOption","results","options","i","length","selected","push","value","text","updateSelectedValue","event","values","target","matches","_settings","enhancedSelectFieldsSelector","tomselect","setValue","unsetAutocompleteAttribute","focus_node","removeAttribute","_hasInitialized","_publicMethods","bodyClass","enhancedSelectSettings","create","diacritics","enhanceFields","selector","settings","TomSelect","undefined","fields","document","querySelectorAll","error","console","warn","message","destroy","on","init","FCUtils","extendObject","addEventListener","body","classList","add"],"mappings":"AAGA,CAAA,SAAWA,EAAMC,GACO,YAAlB,OAAOC,QAAyBA,OAAOC,IAC3CD,OAAO,GAAID,EAAY,CAAC,EACM,UAAnB,OAAOG,QAClBC,OAAOD,QAAUH,EAAY,EAE7BD,EAAKM,iBAAmBL,EAAY,CAErC,EAAoB,aAAlB,OAAOM,OAAyBA,OAASC,KAAKC,QAAUD,KAAKD,OAAQ,SAAUP,GAEjF,aA+BsB,SAAlBU,EAA4BC,GAM/B,IALA,IAEIC,EAFAC,EAAU,GACVC,EAAUH,GAASA,EAAMG,QAInBC,EAAI,EAAGA,EAAID,EAAQE,OAAQD,CAAC,IACrCH,EAAgBE,EAAQC,IAELE,UAClBJ,EAAQK,KAAMN,EAAcO,OAASP,EAAcQ,IAAK,EAS1D,OAHCP,EADuB,IAAnBA,EAAQG,OACFH,EAAQ,GAGZA,CACR,CAO0B,SAAtBQ,EAAgCC,GAEnC,IASIC,GANGZ,EAHKW,EAAME,QAGLC,QAASC,EAAUC,4BAA6B,GAGtDhB,EAAMiB,YAGTL,EAASb,EAAiBC,CAAM,EAIpCA,EAAMiB,UAAUC,SAAUN,EAAQ,CAAA,CAAK,EACxC,CAOiC,SAA7BO,IAEatB,KACYuB,WAGhBC,gBAAiB,cAAe,CAC7C,CAtFA,IAAIC,EAAkB,CAAA,EAClBC,EAAiB,GACjBR,EAAY,CACfS,UAAuC,yBAEvCR,6BAAuC,2BACvCS,uBAAwB,CACvBC,OAAQ,CAAA,EACRC,WAAY,CAAA,CACb,CACD,EAyKA,OAnFAJ,EAAeK,cAAgB,SAAUC,EAAUC,GAElD,GAAK,aAAgB,OAAOC,WAQvB,UAAa,OAJjBF,EADIG,MAAcH,EACPd,EAAUC,6BAIGa,GAAzB,CAQA,IAAII,EALCD,MAAcF,IAClBA,EAAWf,EAAUU,wBAKtB,IACCQ,EAASC,SAASC,iBAAkBN,CAAS,CAK9C,CAHA,MAAOO,GAEN,OADAC,KAAAA,QAAQC,KAAM,oBAAsBF,EAAMG,OAAQ,CAEnD,CAGA,IAAM,IAAInC,EAAI,EAAGA,EAAI6B,EAAO5B,OAAQD,CAAC,GAAK,CAEzC,IAAIJ,EAAQiC,EAAQ7B,GAChBQ,EAASb,EAAiBC,CAAM,EAG/BA,EAAMiB,WACVjB,EAAMiB,UAAUuB,QAAQ,EAIzB,IAAIT,UAAW/B,EAAO8B,CAAS,EAI/B9B,EAAMiB,UAAUC,SAAUN,EAAQ,CAAA,CAAK,EAIvCZ,EAAMiB,UAAUwB,GAAI,aAActB,CAA2B,EAC7DnB,EAAMiB,UAAUwB,GAAI,QAAStB,CAA2B,EACxDnB,EAAMiB,UAAUwB,GAAI,OAAQtB,CAA2B,CACxD,CAxC8C,CAyC/C,EAOAI,EAAemB,KAAO,SAAUvC,GAC1BmB,IAGLP,EAAY4B,QAAQC,aAAc7B,EAAWZ,CAAQ,EAGrD+B,SAASW,iBAAkB,SAAUnC,EAAqB,CAAA,CAAK,EAG/Da,EAAeK,cAAc,EAG7BM,SAASY,KAAKC,UAAUC,IAAKjC,EAAUS,SAAU,EAEjDF,EAAkB,CAAA,EACnB,EASOC,CAER,CAAC"}