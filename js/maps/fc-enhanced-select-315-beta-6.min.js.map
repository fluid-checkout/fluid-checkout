{"version":3,"file":"../fc-enhanced-select-315-beta-6.min.js","sources":["fc-enhanced-select-315-beta-6.js"],"sourcesContent":["/**\n * Initialize enhanced select fields with TomSelect, instead of Select2.\n */\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t\tdefine([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t\tmodule.exports = factory(root);\n\t} else {\n\t\troot.FCEnhancedSelect = factory(root);\n\t}\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\tvar _hasInitialized = false;\n\tvar _publicMethods = {};\n\tvar _settings = {\n\t\tbodyClass:                             'has-fc-enhanced-select',\n\n\t\tenhancedSelectFieldsSelector:          '.fc-select2-field select',\n\t\tenhancedSelectSettings: {\n\t\t\tcreate: false,\n\t\t\topenOnFocus: true,\n\t\t\tselectOnTab: true,\n\t\t\tdiacritics: true,\n\t\t},\n\t};\n\n\n\n\t/**\n\t * PROPERTIES\n\t */\n\n\n\n\t/**\n\t * Mapping of keyboard keys based on and comparable with `event.key` values.\n\t */\n\t_publicMethods.keyboardKeys = {\n\t\tESC: 'Escape',\n\t\tENTER: 'Enter',\n\t\tSPACE: ' ',\n\t\tTAB: 'Tab',\n\t\tCAPS: 'CapsLock',\n\t\tSHIFT: 'Shift',\n\t\tFUNCTION: 'Fn',\n\t\tCONTROL: 'Control',\n\t\tCOMMAND_OR_WINDOWS: 'Meta', // This is the `Windows` logo key, or the `Command` or `âŒ˜` key on Mac keyboards.\n\t\tALT: 'Alt',\n\t\tARROW_LEFT: 'ArrowLeft',\n\t\tARROW_RIGHT: 'ArrowRight',\n\t\tARROW_UP: 'ArrowUp',\n\t\tARROW_DOWN: 'ArrowDown',\n\t}\n\n\n\n\t/**\n\t * Determine which `animationend` event is supported.\n\t */\n\t_publicMethods.animationEndEvent = window.whichAnimationEnd ? window.whichAnimationEnd() : 'animationend';\n\n\n\n\n\t/**\n\t * METHODS\n\t */\n\n\n\n\t/*!\n\t* Merge two or more objects together.\n\t* (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com\n\t* @param   {Boolean}  deep     If true, do a deep (or recursive) merge [optional]\n\t* @param   {Object}   objects  The objects to merge together\n\t* @returns {Object}            Merged values of defaults and options\n\t*/\n\t_publicMethods.extendObject = function () {\n\t\t// Variables\n\t\tvar extended = {};\n\t\tvar deep = false;\n\t\tvar i = 0;\n\n\t\t// Check if a deep merge\n\t\tif ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\n\t\t\tdeep = arguments[0];\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge the object into the extended object\n\t\tvar merge = function (obj) {\n\t\t\tfor (var prop in obj) {\n\t\t\t\tif (obj.hasOwnProperty(prop)) {\n\t\t\t\t\t// If property is an object, merge properties\n\t\t\t\t\tif (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n\t\t\t\t\t\textended[prop] = _publicMethods.extendObject(extended[prop], obj[prop]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textended[prop] = obj[prop];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Loop through each object and conduct a merge\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar obj = arguments[i];\n\t\t\tmerge(obj);\n\t\t}\n\n\t\treturn extended;\n\t};\n\n\n\n\t/**\n\t * Returns a function, that, as long as it continues to be invoked, will not\n\t * be triggered. The function will be called after it stops being called for\n\t * N milliseconds. If `immediate` is passed, trigger the function on the\n\t * leading edge, instead of the trailing.\n\t *\n\t * @param   {[type]}  func       Function to be executed.\n\t * @param   {[type]}  wait       Wait time in milliseconds.\n\t * @param   {[type]}  immediate  Trigger the function on the leading edge.\n\t *\n\t * @return  function              Function to be executed, incapsulated in a timed function.\n\t */\n\t_publicMethods.debounce = function ( func, wait, immediate ) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\t\t\tvar later = function() {\n\t\t\t\ttimeout = null;\n\t\t\t\tif (!immediate) func.apply( context, args );\n\t\t\t};\n\n\t\t\tvar callNow = immediate && !timeout;\n\t\t\tclearTimeout( timeout );\n\t\t\ttimeout = setTimeout( later, wait );\n\n\t\t\tif ( callNow ) func.apply( context, args );\n\t\t};\n\t};\n\n\n\n\n\n\t/**\n\t * Set the variables that track the current focused element and its value.\n\t */\n\tvar getCurrentFocusedElementGlobalVariables = function( setToRelativeSelect2 ) {\n\t\t// Set defaults\n\t\tif ( setToRelativeSelect2 !== true ) {\n\t\t\tsetToRelativeSelect2 = false;\n\t\t}\n\n\t\t// Set current focused element and value\n\t\tvar currentfocusedElement = document.activeElement;\n\n\t\t// Maybe set set to relative `select2` field element,\n\t\t// if the focus is current on a `select2` field option.\n\t\tvar select2Options = currentfocusedElement.closest( _settings.select2OptionsSelector );\n\t\tif ( setToRelativeSelect2 && select2Options ) {\n\t\t\tvar select2ElementId = select2Options.getAttribute( 'id' ).replace( '-results', '-container' );\n\t\t\tcurrentfocusedElement = document.getElementById( select2ElementId );\n\t\t}\n\n\t\t// Maybe set to form row for `select2` fields\n\t\tvar currentFocusedFormRow = currentfocusedElement.closest( _settings.select2FormRowSelector );\n\t\tif ( currentFocusedFormRow && currentFocusedFormRow.querySelector( _settings.select2SelectionSelector ) ) {\n\t\t\t// Remove focus from current element as it will be replaced\n\t\t\t// This fixes an issue where `select2` fields would not work properly\n\t\t\t// after checkout is updated while focus is on a `select2` field\n\t\t\tif ( currentfocusedElement ) { currentfocusedElement.blur(); }\n\n\t\t\tcurrentfocusedElement = currentFocusedFormRow;\n\t\t}\n\n\t\treturn currentfocusedElement;\n\t}\n\n\n\n\t/**\n\t * Update the selected value of an enhanced select field.\n\t * \n\t * @param  {Event}  event  The `change` event.\n\t */\n\tvar updateSelectedValue = function( event ) {\n\t\t// Get field reference and value\n\t\tvar field = event.target;\n\n\t\t// Bail if field does not match enhanced select selector\n\t\tif ( ! field.matches( _settings.enhancedSelectFieldsSelector ) ) { return; }\n\n\t\t// Bail if field is not a TomSelect field\n\t\tif ( ! field.tomselect ) { return; }\n\n\t\t// Get updated field value\n\t\tvar value = field.value;\n\n\t\t// Set value, without triggering `change` event\n\t\t// to avoid infinite loop.\n\t\tfield.tomselect.setValue( value, true );\n\t}\n\n\n\n\t/** \n\t * Enhance selecct fields with TomSelect.\n\t * \n\t * @param  {string}  selector   (optional) Selector for the fields to enhance, will use default settings if not defined.\n\t * @param  {object}  settings   (optional) Settings for the enhanced select fields, will use default settings if not defined.\n\t */\n\t_publicMethods.enhanceFields = function( selector, settings ) {\n\t\t// Bail if TomSelect is not defined\n\t\tif ( 'undefined' === typeof TomSelect ) { return; }\n\n\t\t// Get selector from settings if not defined\n\t\tif ( undefined === selector || null === selector ) {\n\t\t\tselector = _settings.enhancedSelectFieldsSelector;\n\t\t}\n\n\t\t// Bail if selector is not of type string\n\t\tif ( 'string' !== typeof selector ) { return; }\n\n\t\t// Maybe get default settings\n\t\tif ( undefined === settings || null === settings ) {\n\t\t\tsettings = _settings.enhancedSelectSettings;\n\t\t}\n\n\t\t// Get fields to apply the enhanced select\n\t\tvar fields;\n\t\ttry {\n\t\t\tfields = document.querySelectorAll( selector );\n\t\t}\n\t\tcatch( error ) {\n\t\t\tconsole.warn( 'Enhanced select: ' + error.message );\n\t\t\treturn;\n\t\t}\n\n\t\t// Iterate fields and enhance them with TomSelect\n\t\tfor ( var i = 0; i < fields.length; i++ ) {\n\t\t\t// Get field reference and value\n\t\t\tvar field = fields[ i ];\n\t\t\tvar value = field.value;\n\n\t\t\t// Maybe destroy TomSelect instance\n\t\t\tif ( field.tomselect ) {\n\t\t\t\tfield.tomselect.destroy();\n\t\t\t}\n\n\t\t\t// Enhance field with TomSelect\n\t\t\tnew TomSelect( field, settings );\n\n\t\t\t// Set value, without triggering `change` event\n\t\t\t// to avoid infinite loop.\n\t\t\tfield.tomselect.setValue( value, true );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Initialize component and set related handlers.\n\t */\n\t_publicMethods.init = function( options ) {\n\t\tif ( _hasInitialized ) return;\n\n\t\t// Merge settings with defaults\n\t\t_settings = _publicMethods.extendObject( _settings, options );\n\n\t\t// Set event listener for enhanced select fields\n\t\tdocument.addEventListener( 'change', updateSelectedValue, true );\n\n\t\t// Initialize fields\n\t\t_publicMethods.enhanceFields();\n\n\t\t// Add init class\n\t\tdocument.body.classList.add( _settings.bodyClass );\n\n\t\t_hasInitialized = true;\n\t}\n\n\n\n\n\n\t/**\n\t * Expose public APIs.\n\t */\n\treturn _publicMethods;\n\n});\n"],"names":["root","factory","define","amd","exports","module","FCEnhancedSelect","global","this","window","updateSelectedValue","event","value","field","target","matches","_settings","enhancedSelectFieldsSelector","tomselect","setValue","_hasInitialized","_publicMethods","bodyClass","enhancedSelectSettings","create","openOnFocus","selectOnTab","diacritics","keyboardKeys","ESC","ENTER","SPACE","TAB","CAPS","SHIFT","FUNCTION","CONTROL","COMMAND_OR_WINDOWS","ALT","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","animationEndEvent","whichAnimationEnd","extendObject","extended","deep","i","Object","prototype","toString","call","arguments","length","prop","obj","hasOwnProperty","debounce","func","wait","immediate","timeout","context","args","callNow","clearTimeout","setTimeout","apply","enhanceFields","selector","settings","TomSelect","undefined","fields","document","querySelectorAll","error","console","warn","message","destroy","init","options","addEventListener","body","classList","add"],"mappings":"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"}