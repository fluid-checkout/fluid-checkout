{"version":3,"file":"../checkout-validation-brazilian-documents-325-beta-5.min.js","sources":["checkout-validation-brazilian-documents-325-beta-5.js"],"sourcesContent":["/**\r\n * Manage checkout front-end validation for: Brazilian Market for WooCommerce (by Claudio Sanches)\r\n *\r\n * DEPENDS ON:\r\n * - checkout-validation.js // Main checkout validation script from Fluid Checkout\r\n * \r\n * BASED ON:\r\n * - https://github.com/lourencorodrigo/validator-brazil\r\n */\r\n\r\n(function (root, factory) {\r\n\tif ( typeof define === 'function' && define.amd ) {\r\n\t\tdefine([], factory(root));\r\n\t} else if ( typeof exports === 'object' ) {\r\n\t\tmodule.exports = factory(root);\r\n\t} else {\r\n\t\troot.CheckoutValidationBrazilianDocuments = factory(root);\r\n\t}\r\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\r\n\r\n\t'use strict';\r\n\r\n\tvar _hasInitialized = false;\r\n\tvar _publicMethods = { };\r\n\tvar _settings = {\r\n\t\ttypeCPFFieldSelector: '.validate-cpf',\r\n\t\ttypeCNPJFieldSelector: '.validate-cnpj',\r\n\t\tvalidateCPF: 'no',\r\n\t\tvalidateCNPJ: 'no',\r\n\t\tvalidationMessages: {\r\n\t\t\tcpf_invalid: 'The CPF number \"{cpf_number}\" is invalid.',\r\n\t\t\tcnpj_invalid: 'The CNPJ number \"{cpf_number}\" is invalid.',\r\n\t\t},\r\n\t};\r\n\tvar regexClearFormatting = /[\\.\\-\\/]+/g;\r\n\r\n\r\n\r\n\t/**\r\n\t * METHODS\r\n\t */\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if form row is a CPF field.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the field is a CPF field.\r\n\t */\r\n\tvar isCPFField = function( field, formRow, validationEvent ) {\r\n\t\t// Bail if not a CPF field\r\n\t\tif ( ! formRow.matches( _settings.typeCPFFieldSelector ) ) { return false; }\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Verify if a CPF value is valid.\r\n\t *\r\n\t * @param   {string}  cpf  The CPF value, with or without formatting.\r\n\t *\r\n\t * @return  {bool}       `true` if CPF is valid, `false` otherwise.\r\n\t */\r\n\tvar isCPF = function( cpf ) {\r\n\t\t// Clear formatting\r\n\t\tcpf = cpf.replace( regexClearFormatting, '' );\r\n\r\n\t\t// Bail if value is empty\r\n\t\tif ( cpf == \"\" ) { return false };\r\n\r\n\t\t// Bail if it is a known invalid CPF value\r\n\t\tif (\r\n\t\t\tcpf.length != 11\r\n\t\t\t|| cpf == \"00000000000\"\r\n\t\t\t|| cpf == \"11111111111\"\r\n\t\t\t|| cpf == \"22222222222\"\r\n\t\t\t|| cpf == \"33333333333\"\r\n\t\t\t|| cpf == \"44444444444\"\r\n\t\t\t|| cpf == \"55555555555\"\r\n\t\t\t|| cpf == \"66666666666\"\r\n\t\t\t|| cpf == \"77777777777\"\r\n\t\t\t|| cpf == \"88888888888\"\r\n\t\t\t|| cpf == \"99999999999\"\r\n\t\t) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar add = 0;\r\n\r\n\t\t// Check first verification digit\r\n\t\tfor ( var i = 0; i < 9; i++ ) {\r\n\t\t\tadd += parseInt( cpf.charAt( i ) ) * ( 10 - i );\r\n\t\t}\r\n\t\tvar rev = 11 - ( add % 11 );\r\n\t\tif ( rev == 10 || rev == 11 ) { rev = 0; }\r\n\r\n\t\t// Maybe return `false` if verification digit is invalid\r\n\t\tif ( rev != parseInt( cpf.charAt( 9 ) ) ) { return false; }\r\n\t  \r\n\t\tadd = 0;\r\n\t  \r\n\t\t// Check second verification digit\r\n\t\tfor ( var i = 0; i < 10; i++ ) {\r\n\t\t\tadd += parseInt( cpf.charAt( i ) ) * ( 11 - i );\r\n\t\t}\r\n\t\trev = 11 - ( add % 11 );\r\n\t\tif ( rev == 10 || rev == 11 ) rev = 0;\r\n\r\n\t\t// Maybe return `false` if verification digit is invalid\r\n\t\tif ( rev != parseInt( cpf.charAt( 10 ) ) ) { return false; }\r\n\r\n\t\t// Return `true` otherwise\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Validate CPF field.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the field has a valid CPF value.\r\n\t */\r\n\tvar validateCPFField = function( field, formRow, validationEvent ) {\r\n\t\t// Bail if field does not have a value, return as \"null\" to skip validation and let the required validation handle it\r\n\t\tif ( ! CheckoutValidation.hasValue( field ) ) { return { valid: null }; }\r\n\r\n\t\t// Clear formatting\r\n\t\tvar fieldValue = field.value.replace( regexClearFormatting, '' );\r\n\r\n\t\t// Bail if user is still typing and field has not reached the minimum length, return as \"null\" to avoid showing error messages\r\n\t\tif ( 'input' === validationEvent && fieldValue.length < 11 ) { return { valid: null }; }\r\n\r\n\t\t// Bail if invalid CPF number\r\n\t\tif ( ! isCPF( field.value ) ) { return { valid: false, message: _settings.validationMessages.cpf_invalid.replace( '{cpf_number}', field.value ) } }\r\n\r\n\t\t// Field is valid\r\n\t\treturn { valid: true };\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if form row is a CNPJ field.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the field is a CNPF field.\r\n\t */\r\n\tvar isCNPJField = function( field, formRow, validationEvent ) {\r\n\t\t// Bail if not a CNPJ field\r\n\t\tif ( ! formRow.matches( _settings.typeCNPJFieldSelector ) ) { return false; }\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Verify if a CNPJ value is valid.\r\n\t *\r\n\t * @param   {string}  cnpj  The CNPJ value, with or without formatting.\r\n\t *\r\n\t * @return  {bool}       `true` if CNPJ is valid, `false` otherwise.\r\n\t */\r\n\tvar isCNPJ = function( cnpj ) {\r\n\t\t// Clear formatting\r\n\t\tcnpj = cnpj.replace( regexClearFormatting, '' );\r\n\r\n\t\t// Bail if empty\r\n\t\tif ( cnpj == \"\" ) { return false; }\r\n\r\n\t\t// Bail if invalid length\r\n\t\tif ( cnpj.length != 14 ) { return false; }\r\n\r\n\t\t// Bail if it is a known invalid number\r\n\t\tif (\r\n\t\t\tcnpj == \"00000000000000\"\r\n\t\t\t|| cnpj == \"11111111111111\"\r\n\t\t\t|| cnpj == \"22222222222222\"\r\n\t\t\t|| cnpj == \"33333333333333\"\r\n\t\t\t|| cnpj == \"44444444444444\"\r\n\t\t\t|| cnpj == \"55555555555555\"\r\n\t\t\t|| cnpj == \"66666666666666\"\r\n\t\t\t|| cnpj == \"77777777777777\"\r\n\t\t\t|| cnpj == \"88888888888888\"\r\n\t\t\t|| cnpj == \"99999999999999\"\r\n\t\t) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Check first verification digit\r\n\t\tvar size = cnpj.length - 2;\r\n\t\tvar numbers = cnpj.substring( 0, size );\r\n\t\tvar digits = cnpj.substring( size );\r\n\t\tvar sum = 0;\r\n\t\tvar pos = size - 7;\r\n\t\tfor ( var i = size; i >= 1; i-- ) {\r\n\t\t\tsum += numbers.charAt( size - i ) * pos--;\r\n\t\t\tif ( pos < 2 ) { pos = 9; }\r\n\t\t}\r\n\t\tvar result = sum % 11 < 2 ? 0 : 11 - ( sum % 11 );\r\n\t\t\r\n\t\t// Bail if first verification digit is invalid\r\n\t\tif ( result != digits.charAt( 0 ) ) { return false; }\r\n\r\n\t\t// Check second verification digit\r\n\t\tsize = size + 1;\r\n\t\tnumbers = cnpj.substring( 0, size );\r\n\t\tsum = 0;\r\n\t\tpos = size - 7;\r\n\t\tfor ( var i = size; i >= 1; i-- ) {\r\n\t\t\tsum += numbers.charAt( size - i ) * pos--;\r\n\t\t\tif ( pos < 2 ) { pos = 9; }\r\n\t\t}\r\n\t\tresult = sum % 11 < 2 ? 0 : 11 - ( sum % 11 );\r\n\t\t\r\n\t\t// Bail if second verification digit is invalid\r\n\t\tif ( result != digits.charAt( 1 ) ) { return false; }\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Validate CNPJ field value.\r\n\t * @param  {Field}    field            Field for validation.\r\n\t * @param  {Element}  formRow          Form row element.\r\n\t * @param  {String}   validationEvent  Event that triggered the validation.\r\n\t * @return {Boolean}                   Whether the field has a valid CPF value.\r\n\t */\r\n\tvar validateCNPJField = function( field, formRow, validationEvent ) {\r\n\t\t// Bail if field does not have a value, return as \"null\" to skip validation and let the required validation handle it\r\n\t\tif ( ! CheckoutValidation.hasValue( field ) ) { return { valid: null }; }\r\n\r\n\t\t// Clear formatting\r\n\t\tvar fieldValue = field.value.replace( regexClearFormatting, '' );\r\n\r\n\t\t// Bail if user is still typing and field has not reached the minimum length, return as \"null\" to avoid showing error messages\r\n\t\tif ( 'input' === validationEvent && fieldValue.length < 14 ) { return { valid: null }; }\r\n\r\n\t\t// Bail if invalid CNPJ number\r\n\t\tif ( ! isCNPJ( field.value ) ) { return { valid: false, message: _settings.validationMessages.cnpj_invalid.replace( '{cnpj_number}', field.value ) } }\r\n\r\n\t\t// Field is valid\r\n\t\treturn { valid: true };\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Register validation types.\r\n\t */\r\n\tvar registerValidationTypes = function() {\r\n\t\t// Maybe register CPF validation type\r\n\t\tif ( 'yes' === _settings.validateCPF ) {\r\n\t\t\tCheckoutValidation.registerValidationType( 'cpf_invalid', 'cpf', isCPFField, validateCPFField );\r\n\t\t}\r\n\r\n\t\t// Maybe register CNPJ validation type\r\n\t\tif ( 'yes' === _settings.validateCNPJ ) {\r\n\t\t\tCheckoutValidation.registerValidationType( 'cnpj_invalid', 'cnpj', isCNPJField, validateCNPJField );\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Initialize component and set related handlers.\r\n\t */\r\n\t_publicMethods.init = function( options ) {\r\n\t\tif ( _hasInitialized ) return;\r\n\r\n\t\t// Bail if `CheckoutValidation` is not available\r\n\t\tif ( ! window.CheckoutValidation ) { return; }\r\n\r\n\t\t// Merge settings\r\n\t\t_settings = FCUtils.extendObject( _settings, options );\r\n\r\n\t\t// Register validation types\r\n\t\tregisterValidationTypes();\r\n\r\n\t\t_hasInitialized = true;\r\n\t};\r\n\r\n\r\n\t\r\n\t//\r\n\t// Public APIs\r\n\t//\r\n\treturn _publicMethods;\r\n\r\n});\r\n"],"names":["root","factory","define","amd","exports","module","CheckoutValidationBrazilianDocuments","global","this","window","isCPFField","field","formRow","validationEvent","matches","_settings","typeCPFFieldSelector","validateCPFField","fieldValue","CheckoutValidation","hasValue","value","replace","regexClearFormatting","length","valid","isCPF","message","validationMessages","cpf_invalid","isCNPJField","typeCNPJFieldSelector","validateCNPJField","isCNPJ","cnpj_invalid","_hasInitialized","_publicMethods","validateCPF","validateCNPJ","cpf","add","i","parseInt","charAt","rev","cnpj","size","numbers","substring","digits","sum","pos","init","options","FCUtils","extendObject","registerValidationType"],"mappings":"AAUA,CAAA,SAAWA,EAAMC,GACO,YAAlB,OAAOC,QAAyBA,OAAOC,IAC3CD,OAAO,GAAID,EAAY,CAAC,EACM,UAAnB,OAAOG,QAClBC,OAAOD,QAAUH,EAAY,EAE7BD,EAAKM,qCAAuCL,EAAY,CAEzD,EAAoB,aAAlB,OAAOM,OAAyBA,OAASC,KAAKC,QAAUD,KAAKD,OAAQ,SAAUP,GAEjF,aA+BiB,SAAbU,EAAuBC,EAAOC,EAASC,GAE1C,MAAOD,CAAAA,CAAAA,EAAQE,QAASC,EAAUC,oBAAqB,CAGxD,CAoEuB,SAAnBC,EAA6BN,EAAOC,EAASC,GAEhD,IAGIK,EAHJ,MAAOC,CAAAA,mBAAmBC,SAAUT,CAAM,IAGtCO,EAAaP,EAAMU,MAAMC,QAASC,EAAsB,EAAG,EAG1D,UAAYV,GAAmBK,EAAWM,OAAS,IAND,CAAEC,MAAO,IAAK,EAS9DC,EAAOf,EAAMU,KAAM,EAGnB,CAAEI,MAAO,CAAA,CAAK,EAHkB,CAAEA,MAAO,CAAA,EAAOE,QAASZ,EAAUa,mBAAmBC,YAAYP,QAAS,eAAgBX,EAAMU,KAAM,CAAE,CAIjJ,CAWkB,SAAdS,EAAwBnB,EAAOC,EAASC,GAE3C,MAAOD,CAAAA,CAAAA,EAAQE,QAASC,EAAUgB,qBAAsB,CAGzD,CA0EwB,SAApBC,EAA8BrB,EAAOC,EAASC,GAEjD,IAGIK,EAHJ,MAAOC,CAAAA,mBAAmBC,SAAUT,CAAM,IAGtCO,EAAaP,EAAMU,MAAMC,QAASC,EAAsB,EAAG,EAG1D,UAAYV,GAAmBK,EAAWM,OAAS,IAND,CAAEC,MAAO,IAAK,EAS9DQ,EAAQtB,EAAMU,KAAM,EAGpB,CAAEI,MAAO,CAAA,CAAK,EAHmB,CAAEA,MAAO,CAAA,EAAOE,QAASZ,EAAUa,mBAAmBM,aAAaZ,QAAS,gBAAiBX,EAAMU,KAAM,CAAE,CAIpJ,CA9NA,IAAIc,EAAkB,CAAA,EAClBC,EAAiB,GACjBrB,EAAY,CACfC,qBAAsB,gBACtBe,sBAAuB,iBACvBM,YAAa,KACbC,aAAc,KACdV,mBAAoB,CACnBC,YAAa,4CACbK,aAAc,4CACf,CACD,EACIX,EAAuB,aA+BvBG,EAAQ,SAAUa,GAKrB,GAAY,KAHZA,EAAMA,EAAIjB,QAASC,EAAsB,EAAG,GAGzB,MAAO,CAAA,EAG1B,GACe,IAAdgB,EAAIf,QACM,eAAPe,GACO,eAAPA,GACO,eAAPA,GACO,eAAPA,GACO,eAAPA,GACO,eAAPA,GACO,eAAPA,GACO,eAAPA,GACO,eAAPA,GACO,eAAPA,EAEH,MAAO,CAAA,EAMR,IAHA,IAAIC,EAAM,EAGAC,EAAI,EAAGA,EAAI,EAAGA,CAAC,GACxBD,GAAOE,SAAUH,EAAII,OAAQF,CAAE,CAAE,GAAM,GAAKA,GAE7C,IAAIG,EAAM,GAAOJ,EAAM,GAIvB,IAHgCI,EAApB,IAAPA,GAAoB,IAAPA,EAGbA,EAHiC,IAG1BF,SAAUH,EAAII,OAAQ,CAAE,CAAE,EAAM,MAAO,CAAA,EAKnD,IAHAH,EAAM,EAGIC,EAAI,EAAGA,EAAI,GAAIA,CAAC,GACzBD,GAAOE,SAAUH,EAAII,OAAQF,CAAE,CAAE,GAAM,GAAKA,GAM7C,OAH8BG,EAAlB,KADZA,EAAM,GAAOJ,EAAM,KACM,IAAPI,EAGbA,EAH+B,IAGxBF,SAAUH,EAAII,OAAQ,EAAG,CAAE,CAIxC,EAiDIV,EAAS,SAAUY,GAKtB,GAAa,KAHbA,EAAOA,EAAKvB,QAASC,EAAsB,EAAG,GAG1B,MAAO,CAAA,EAG3B,GAAoB,IAAfsB,EAAKrB,OAAiB,MAAO,CAAA,EAGlC,GACS,kBAARqB,GACW,kBAARA,GACQ,kBAARA,GACQ,kBAARA,GACQ,kBAARA,GACQ,kBAARA,GACQ,kBAARA,GACQ,kBAARA,GACQ,kBAARA,GACQ,kBAARA,EAEH,MAAO,CAAA,EASR,IALA,IAAIC,EAAOD,EAAKrB,OAAS,EACrBuB,EAAUF,EAAKG,UAAW,EAAGF,CAAK,EAClCG,EAASJ,EAAKG,UAAWF,CAAK,EAC9BI,EAAM,EACNC,EAAML,EAAO,EACPL,EAAIK,EAAW,GAALL,EAAQA,CAAC,GAC5BS,GAAOH,EAAQJ,OAAQG,EAAOL,CAAE,EAAIU,CAAG,GAClCA,EAAM,IAAMA,EAAM,GAKxB,IAHaD,EAAM,GAAK,EAAI,EAAI,GAAOA,EAAM,KAG9BD,EAAON,OAAQ,CAAE,EAAM,MAAO,CAAA,EAO7C,IAHAI,EAAUF,EAAKG,UAAW,EAD1BF,GAAc,CACoB,EAClCI,EAAM,EACNC,EAAML,EAAO,EACHL,EAAIK,EAAW,GAALL,EAAQA,CAAC,GAC5BS,GAAOH,EAAQJ,OAAQG,EAAOL,CAAE,EAAIU,CAAG,GAClCA,EAAM,IAAMA,EAAM,GAKxB,OAHSD,EAAM,GAAK,EAAI,EAAI,GAAOA,EAAM,KAG1BD,EAAON,OAAQ,CAAE,CAGjC,EAoEA,OApBAP,EAAegB,KAAO,SAAUC,GAC1BlB,GAGE1B,OAAOU,qBAnBT,SAsBLJ,EAAYuC,QAAQC,aAAcxC,EAAWsC,CAAQ,GAtB5BhB,aACxBlB,mBAAmBqC,uBAAwB,cAAe,MAAO9C,EAAYO,CAAiB,EAI1F,QAAUF,EAAUuB,cACxBnB,mBAAmBqC,uBAAwB,eAAgB,OAAQ1B,EAAaE,CAAkB,EAqBnGG,EAAkB,CAAA,EACnB,EAOOC,CAER,CAAC"}